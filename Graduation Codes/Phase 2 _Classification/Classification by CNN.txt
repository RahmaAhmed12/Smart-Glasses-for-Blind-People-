import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.utils import shuffle
import cv2
import os

# Function to load images and labels from a directory
def load_images_and_labels(directory, label):
    images = []
    labels = []
    print(f"Loading images from directory: {directory}")
    for filename in os.listdir(directory):
        if filename.endswith('.jpg'):
            img_path = os.path.join(directory, filename)
            try:
                img = cv2.imread(img_path)
                if img is None:
                    print(f"Failed to load image: {filename}")
                    continue
                img = cv2.resize(img, (64, 64)) # Resize image to desired size
                images.append(img)
                labels.append(label)
                print(f"Loaded image: {filename}")
            except Exception as e:
                print(f"Error loading image {filename}: {e}")
    return images, labels

# Assuming you have your dataset stored in separate directories for each class
face_dir = '/kaggle/input/dataset/face'
currency_dir = '/kaggle/input/dataset/currency'
object_dir = '/kaggle/input/dataset/object'

# Load face images and corresponding labels
face_images, face_labels = load_images_and_labels(face_dir, 'face')
print(f"Face images loaded: {len(face_images)}, Face labels loaded: {len(face_labels)}")

# Load currency images and corresponding labels
currency_images, currency_labels = load_images_and_labels(currency_dir, 'currency')
print(f"Currency images loaded: {len(currency_images)}, Currency labels loaded: {len(currency_labels)}")

# Load object category images and corresponding labels
object_images, object_labels = load_images_and_labels(object_dir, 'object')
print(f"Object images loaded: {len(object_images)}, Object labels loaded: {len(object_labels)}")

# Combine the data from face, currency, and object classes
images = face_images + currency_images + object_images
labels = face_labels + currency_labels + object_labels

# Convert the images and labels to numpy arrays
images = np.array(images)
labels = np.array(labels)

# Shuffle the data
images, labels = shuffle(images, labels, random_state=42)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

# Ensure labels are strings before encoding
y_train = np.array([str(label) for label in y_train])
y_test = np.array([str(label) for label in y_test])

# Use LabelEncoder for consistency
label_encoder = LabelEncoder()

# Fit LabelEncoder on mapped labels to get the encoding
label_encoder.fit(y_train)

# Transform the mapped labels using the LabelEncoder
y_train_encoded = label_encoder.transform(y_train)
y_test_encoded = label_encoder.transform(y_test)

# Convert encoded labels back to integers for compatibility with the model
y_train_encoded = y_train_encoded.astype(np.int32)
y_test_encoded = y_test_encoded.astype(np.int32)

# Check data types to ensure they are as expected
print(f"X_train dtype: {X_train.dtype}, y_train_encoded dtype: {y_train_encoded.dtype}")
print(f"X_test dtype: {X_test.dtype}, y_test_encoded dtype: {y_test_encoded.dtype}")

# Define the CNN model architecture
model = keras.Sequential([
    layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(64, 64, 3)),
    layers.MaxPooling2D(pool_size=(2, 2)),
    layers.Conv2D(64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D(pool_size=(2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(3, activation='softmax') # Three output classes: face, currency, object
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Normalize pixel values to the range of 0-1
X_train = X_train.astype('float32') / 255.0
X_test = X_test.astype('float32') / 255.0

# Train the model
model.fit(X_train, y_train_encoded, batch_size=32, epochs=10, validation_data=(X_test, y_test_encoded))

# Evaluate the model
test_loss, test_accuracy = model.evaluate(X_test, y_test_encoded, verbose=2)
print(f'Test Loss: {test_loss}, Test Accuracy: {test_accuracy}')



/////////////////////////////////////////////////////////////////////////////////////////////////////////

# Make predictions on new images
new_image_path = '/kaggle/input/multi2/cropped_images/cropped_image_7.jpg'
new_image = cv2.imread(new_image_path)
new_image = cv2.resize(new_image, (64, 64))  # Resize image to match the input size of the model
new_image = new_image.astype('float32') / 255.0  # Normalize pixel values to the range of 0-1
new_image = np.expand_dims(new_image, axis=0)  # Add an extra dimension to represent the batch size
predictions = model.predict(new_image)
predicted_classes = np.argmax(predictions, axis=1)

# Map the predicted classes to their corresponding labels
labels = [ 'currency','face', 'object']
predicted_labels = [labels[i] for i in predicted_classes]

# Print the predicted labels
print(predicted_labels)

//////////////////////////////////////////////////////////////////////////////////////////

import os

# Define the filepath for saving the model
model_filepath = '/kaggle/working/my_modelllclm.h5'

# Save the model
model.save(model_filepath)

# Check if the model file exists
if os.path.exists(model_filepath):
    print("Model saved successfully.")
    print("Download the model from the following link:")
    print(model_filepath)
else:
    print("Error: Model not saved.")

/////////////////////////////////////////////////////////////////////////////////

import os
import cv2
import numpy as np

# Define the folder containing the images
folder_path = '/kaggle/input/new-crpped/new_cropped'
image_files = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]

for image_file in image_files:
    image_path = os.path.join(folder_path, image_file)
    image = cv2.imread(image_path)
    image = cv2.resize(image, (64, 64))
    image = image.astype('float32') / 255.0
    image = np.expand_dims(image, axis=0)
    predictions = model.predict(image)
    predicted_class = np.argmax(predictions, axis=1)[0]
    labels = ['currency', 'face', 'object']
    predicted_label = labels[predicted_class]
    print(f"Predicted label for {image_file}: {predicted_label}")

//////////////////////////////////////////////////////////////////////////////

import os

# Define the filepath for saving the model
model_filepath = '/kaggle/working/my_modelllmmc.h5'

# Save the model
model.save(model_filepath)

# Check if the model file exists
if os.path.exists(model_filepath):
    print("Model saved successfully.")
    print("Download the model from the following link:")
    print(model_filepath)
else:
    print("Error: Model not saved.")


